{
  "Parameters": {
    "Environment": {
      "Type": "String",
      "Default": ""
    },
    "ClusterName": {
      "Type": "String"
    },
    "S3Bucket": {
      "Type": "String"
    },
    "S3Key": {
      "Type": "String"
    },
    "TaskStopTimeout": {
      "Type": "String",
      "Default": "30s"
    },
    "AmiId": {
      "Type": "String"
    },
    "ASGInstanceType": {
      "Type": "String"
    },
    "ASGMax": {
      "Type": "String",
      "Default": "1"
    },
    "ASGMin": {
      "Type": "String",
      "Default": "1"
    },
    "ASGSize": {
      "Type": "String",
      "Default": "1"
    }
  },
  "Conditions": {
    "EnvProvided": {
      "Fn::Not" : [
        { "Fn::Equals": [{"Ref": "Environment"}, ""]}
      ]
    }
  },
  "Resources": {
    "ASGSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allows ingress on all ephemeral ports for load balancers",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 1024,
            "ToPort": 65535,
            "SourceSecurityGroupId": {
              "Fn::ImportValue": {
                "Fn::If": [ "EnvProvided",
                  {
                    "Fn::Sub": "${Environment}-${ClusterName}-ecs-cluster-stack:ClusterSecurityGroup"
                  },
                  {
                    "Fn::Sub": "${ClusterName}-ecs-cluster-stack:ClusterSecurityGroup"
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "ASGLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "/etc/ecs/ecs.config": {
                "content": {
                  "Fn::If": [ "EnvProvided",
                    {
                      "Fn::Sub": [
                        "ECS_CLUSTER=${Cluster}\nECS_CONTAINER_STOP_TIMEOUT=${TaskStopTimeout}",
                        {
                          "Cluster": {"Fn::Join": ["-", [{"Ref": "Environment"}, {"Ref": "ClusterName"}]]}
                        }
                      ]
                    },
                    {
                      "Fn::Sub": "ECS_CLUSTER=${ClusterName}\nECS_CONTAINER_STOP_TIMEOUT=${TaskStopTimeout}"
                    }
                  ]
                }
              },
              "/etc/cfn/cfn-hub.conf": {
                "content": {
                  "Fn::Join": ["", ["[main]\n", "stack=", {"Ref": "AWS::StackId"}, "\nregion=", {"Ref": "AWS::Region"}, "\n"]]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": ["", ["[cfn-auto-reloader-hook]\n", "triggers=post.update\n", "path=Resources.ECSLaunchConfiguration.Metadata.AWS::CloudFormation::Init\n", "action=/opt/aws/bin/cfn-init -v ", "         --stack ", {"Ref": "AWS::StackName"}, "         --resource ECSLaunchConfiguration ", "         --region ", {"Ref": "AWS::Region"}, "\n", "runas=root\n"]]
                },
                "services": {
                  "sysvinit": {
                    "cfn-hup": {
                      "enabled": "true",
                      "ensureRunning": "true",
                      "files": [
                        "/etc/cfn/cfn-hup.conf",
                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Properties": {
        "IamInstanceProfile": {"Ref": "ASGInstanceProfile"},
        "ImageId": {"Ref": "AmiId"},
        "InstanceType": {"Ref": "ASGInstanceType"},
        "InstanceMonitoring": false,
        "SecurityGroups": [
          {"Ref": "ASGSecurityGroup"}
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [ "\n", [
              "#!/bin/bash -xe",
              "yum update -y",
              "yum install -y aws-cli jq aws-cfn-bootstrap",
              {"Fn::Sub": "/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ASGLaunchConfiguration --region ${AWS::Region}"},
              {"Fn::Sub": "/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region} || true"}
            ]]
          }
        }
      }
    },
    "ASGRole": {
      "Type": "AWS::IAM::Role",
  		"Properties": {
  			"AssumeRolePolicyDocument": {
  				"Statement": [
  					{
  						"Action": [
  							"sts:AssumeRole"
  						],
  						"Effect": "Allow",
  						"Principal": {
  							"Service": [
  								"ec2.amazonaws.com"
  							]
  						}
  					}
  				],
  				"Version": "2012-10-17"
  			},
  			"Policies": [
  				{
  					"PolicyDocument": {
  						"Statement": [
  							{
  								"Action": [
  									"ecs:CreateCluster",
  									"ecs:DeregisterContainerInstance",
  									"ecs:DiscoverPollEndpoint",
  									"ecs:Poll",
  									"ecs:RegisterContainerInstance",
  									"ecs:StartTelemetrySession",
  									"ecs:Submit*",
  									"logs:*",
  									"iam:PassRole"
  								],
  								"Effect": "Allow",
  								"Resource": [
  									"*"
  								]
  							},
  							{
  								"Action": [
  									"ecr:GetAuthorizationToken",
  									"ecr:BatchCheckLayerAvailability",
  									"ecr:GetDownloadUrlForLayer",
  									"ecr:BatchGetImage"
  								],
  								"Effect": "Allow",
  								"Resource": [
  									"*"
  								]
  							},
  							{
  								"Action": [
  									"ecs:StartTask"
  								],
  								"Effect": "Allow",
  								"Resource": "*"
  							}
  						],
  						"Version": "2012-10-17"
  					},
  					"PolicyName": "ecsAccess"
  				},
  				{
  					"PolicyDocument": {
  						"Statement": [
  							{
  								"Action": [
  									"ec2:CreateTags",
  									"ec2:DescribeSpotInstanceRequests"
  								],
  								"Effect": "Allow",
  								"Resource": [
  									"*"
  								]
  							}
  						],
  						"Version": "2012-10-17"
  					},
  					"PolicyName": "selfDiscovery"
  				}
  			]
  		}
  	},
    "ASGInstanceProfile": {
  		"Type": "AWS::IAM::InstanceProfile",
  		"Properties": {
  			"Path": "/",
  			"Roles": [
  				{"Ref": "ASGRole"}
  			]
  		}
  	},
  	"AutoScalingGroup": {
  		"Type": "AWS::AutoScaling::AutoScalingGroup",
  		"CreationPolicy": {
  			"ResourceSignal": {
  				"Timeout": "PT15M"
  			}
  		},
  		"Properties": {
  			"AvailabilityZones": {
  				"Fn::GetAZs": {
  					"Ref": "AWS::Region"
  				}
  			},
  			"LaunchConfigurationName": {"Ref": "ASGLaunchConfiguration"},
  			"HealthCheckGracePeriod": 60,
  			"DesiredCapacity": {"Ref": "ASGSize"},
  			"MaxSize": {"Ref": "ASGMax"},
  			"MinSize": {"Ref": "ASGMin"},
  			"HealthCheckType": "EC2"
  		},
  		"UpdatePolicy": {
  			"AutoScalingRollingUpdate": {
  				"MaxBatchSize": 1,
  				"MinInstancesInService": {"Ref": "ASGMin"},
  				"PauseTime": "PT10M",
  				"WaitOnResourceSignals": true
  			}
  		}
    },
    "ASGAlarmIn": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "GreaterThanThreshold",
        "MetricName": "AdditionalTasks",
        "Namespace": "AWS/ECS",
        "Period": 60,
        "Statistic": "Maximum",
        "Threshold": "5",
        "ActionsEnabled": true,
        "AlarmActions": [{
          "Ref": "ASGScaleInPolicy"
        }],
        "AlarmDescription": {
          "Fn::Sub": "Scale in ${ClusterName}"
        },
        "Dimensions": [
          {
            "Name": "ClusterName",
            "Value": {
              "Fn::If": [ "EnvProvided",
                {"Fn::Join": ["-", [{"Ref": "Environment"}, {"Ref": "ClusterName"}]]},
                {"Ref": "ClusterName"}
              ]
            }
          }
        ],
        "EvaluationPeriods": 1
      }
    },
    "ASGAlarmOut": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "LessThanOrEqualToThreshold",
        "MetricName": "AdditionalTasks",
        "Namespace": "AWS/ECS",
        "Period": 60,
        "Statistic": "Maximum",
        "Threshold": "1",
        "ActionsEnabled": true,
        "AlarmActions": [{
          "Ref": "ASGScaleOutPolicy"
        }],
        "AlarmDescription": {
          "Fn::Sub": "Scale out ${ClusterName}"
        },
        "Dimensions": [
          {
            "Name": "ClusterName",
            "Value": {
              "Fn::If": [ "EnvProvided",
                {"Fn::Join": ["-", [{"Ref": "Environment"}, {"Ref": "ClusterName"}]]},
                {"Ref": "ClusterName"}
              ]
            }
          }
        ],
        "EvaluationPeriods": 1
      }
    },
    "ASGScaleOutPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "PercentChangeInCapacity",
        "PolicyType": "StepScaling",
        "EstimatedInstanceWarmup": 60,
        "AutoScalingGroupName": {"Ref": "AutoScalingGroup"},
        "MinAdjustmentMagnitude": 1,
        "StepAdjustments": [
          {
            "MetricIntervalLowerBound": -2,
            "ScalingAdjustment": 1
          },
          {
            "MetricIntervalUpperBound": -2,
            "ScalingAdjustment": 0
          }
        ]
      }
    },
    "ASGScaleInPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "PolicyType": "SimpleScaling",
        "Cooldown": 180,
        "ScalingAdjustment": 1,
        "AutoScalingGroupName": {"Ref": "AutoScalingGroup"}
      }
    },
    "ECSLifecycleHook": {
  		"Type": "AWS::AutoScaling::LifecycleHook",
  		"Properties": {
  			"AutoScalingGroupName": {"Ref": "AutoScalingGroup"},
  			"HeartbeatTimeout": 60,
  			"LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
  			"NotificationMetadata": {
          "Fn::If": [ "EnvProvided",
            {
              "Fn::Sub": [
                "{\"ecs_timeout\": \"${TaskStopTimeout}\", \"ecs_cluster\": \"${Cluster}\"}",
                {
                  "Cluster": {"Fn::Join": ["-", [{"Ref": "Environment"}, {"Ref": "ClusterName"}]]}
                }
              ]
            },
            {
              "Fn::Sub": "{\"ecs_timeout\": \"${TaskStopTimeout}\", \"ecs_cluster\": \"${ClusterName}\"}"
            }
          ]
        },
        "NotificationTargetARN": {
          "Fn::ImportValue": {
            "Fn::If": [ "EnvProvided",
              {
                "Fn::Sub": "${Environment}-${ClusterName}-ecs-lambda-stack:LifecycleSNSTopicArn"
              },
              {
                "Fn::Sub": "${ClusterName}-ecs-lambda-stack:LifecycleSNSTopicArn"
              }
            ]
          }
        },
  			"RoleARN": {
          "Fn::ImportValue": {
            "Fn::If": [ "EnvProvided",
              {
                "Fn::Sub": "${Environment}-${ClusterName}-ecs-lambda-stack:LifecycleHookRole"
              },
              {
                  "Fn::Sub": "${ClusterName}-ecs-lambda-stack:LifecycleHookRole"
              }
            ]
          }
        }
  		}
  	}
  }
}
