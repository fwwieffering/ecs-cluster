{
  "Parameters": {
    "Environment": {
      "Type": "String",
      "Default": ""
    },
    "ClusterName": {
      "Type": "String"
    },
    "S3Bucket": {
      "Type": "String"
    },
    "S3Key": {
      "Type": "String"
    },
    "TaskStopTimeout": {
      "Type": "String",
      "Default": "30s"
    },
    "AmiId": {
      "Type": "String"
    },
    "ASGInstanceType": {
      "Type": "String"
    },
    "ASGMax": {
      "Type": "String",
      "Default": "1"
    },
    "ASGMin": {
      "Type": "String",
      "Default": "1"
    },
    "ASGSize": {
      "Type": "String",
      "Default": "1"
    }
  },
  "Conditions": {
    "EnvProvided": {
      "Fn::Not" : [
        { "Fn::Equals": [{"Ref": "Environment"}, ""]}
      ]
    }
  },
  "Resources": {
    "MetricLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {"Ref": "S3Bucket"},
          "S3Key": {"Ref": "S3Key"}
        },
        "Description": "Posts custom cloudwatch metric for autoscaling ecs compute",
        "Role": { "Fn::GetAtt": ["MetricLambdaRole", "Arn"] },
        "Runtime": "python3.6",
        "Handler": "custom_metric_collector.main"
      }
    },
    "MetricLambdaCron": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "rate(1 minute)",
        "Description": "Cron to kick off ecs metric collector",
        "Targets": [
          {
            "Arn": {"Fn::GetAtt": ["MetricLambda", "Arn"]},
            "Id": 1,
            "Input": {
              "Fn::If": [ "EnvProvided",
                {
                  "Fn::Sub": [
                    "{\"Cluster\": \"${Cluster}\"}",
                    {
                      "Cluster": {"Fn::Join": ["-", [{"Ref": "Environment"}, {"Ref": "ClusterName"}]]}
                    }
                  ]
                },
                {
                  "Fn::Sub": "{\"Cluster\": \"${ClusterName}\"}"
                }
              ]
            }
          }
        ]
      }
    },
    "MetricLambdaPerm": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {"Fn::GetAtt": ["MetricLambda", "Arn"]},
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {"Fn::GetAtt": ["MetricLambdaCron", "Arn"]}
      }
    },
    "MetricLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
    		"AssumeRolePolicyDocument": {
    			"Statement": [
    				{
    					"Effect": "Allow",
    					"Principal": {
    						"Service": [
    							"lambda.amazonaws.com"
    						]
    					},
    					"Action": [
    						"sts:AssumeRole"
    					]
    				},
    				{
    					"Effect": "Allow",
    					"Principal": {
    						"AWS": {"Fn::Sub": "${AWS::AccountId}"}
    					},
    					"Action": [
    						"sts:AssumeRole"
    					],
    					"Condition": {
    						"Bool": {
    							"aws:MultiFactorAuthPresent": true
    						}
    					}
    				}
    			]
    		},
    		"Path": "/admin/resources/",
    		"Policies": [
    			{
    				"PolicyName": "ecs-cluster-provision",
    				"PolicyDocument": {
    					"Statement": [
    						{
    							"Effect": "Allow",
    							"Resource": [
    								"*"
    							],
    							"Action": [
                    "logs:*",
    								"ec2:DescribeAutoScalingGroups",
    								"ec2:UpdateAutoScalingGroup",
    								"ecs:*",
    								"cloudwatch:PutMetricData"
    							]
    						}
    					]
    				}
    			}
    		]
    	}
    },
    "LifeCycleSNS": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          {
            "Endpoint": {"Fn::GetAtt": ["LifeCycleKickoffLambda","Arn"]},
            "Protocol": "lambda"
          }
        ]
      }
    },
    "LifeCycleSNSPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["LifeCycleKickoffLambda", "Arn"]},
        "Principal": "sns.amazonaws.com",
        "SourceArn": {"Ref": "LifeCycleSNS"}
      }
    },
    "LifeCycleKickoffLambda": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": "LifecycleStateMachine",
      "Properties": {
        "Code": {
          "S3Bucket": {"Ref": "S3Bucket"},
          "S3Key": {"Ref": "S3Key"}
        },
        "Description": "Lambda function to kick off the ecs lifecycle step function",
        "Environment": {
          "Variables": {
            "STATE_FUNCTION": {"Ref": "LifecycleStateMachine"}
          }
        },
        "Runtime": "python3.6",
        "Handler": "lifecycle_init.lambda_handler",
        "Role": {"Fn::GetAtt": ["InitLambdaRole", "Arn"]}
      }
    },
    "LifeCycleLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {"Ref": "S3Bucket"},
          "S3Key": {"Ref": "S3Key"}
        },
        "Description": "Lambda function to handle clean shutdown of ECS ASG instances",
        "Handler": "lifecycle_handler.lambda_handler",
        "Role": {
          "Fn::GetAtt": ["LifecycleLambdaRole", "Arn"]
        },
        "Runtime": "python3.6",
        "Timeout": "300"
      }
    },
    "LifeCycleHookRole": {
      "Type": "AWS::IAM::Role",
  		"Properties": {
  			"AssumeRolePolicyDocument": {
  				"Statement": [
  					{
  						"Action": "sts:AssumeRole",
  						"Effect": "Allow",
  						"Principal": {
  							"Service": "autoscaling.amazonaws.com"
  						}
  					}
  				],
  				"Version": "2012-10-17"
  			},
  			"Path": "/ecs/lambda/lifecycle/",
  			"Policies": [
  				{
  					"PolicyDocument": {
  						"Statement": [
  							{
  								"Action": [
  									"sns:Publish"
  								],
  								"Effect": "Allow",
  								"Resource": {"Ref": "LifeCycleSNS"}
  							}
  						],
  						"Version": "2012-10-17"
  					},
  					"PolicyName": "LifecycleSNSPublish"
  				}
  			]
  		}
  	},
    "InitLambdaRole": {
      "Type": "AWS::IAM::Role",
  		"Properties": {
  			"AssumeRolePolicyDocument": {
  				"Statement": [
  					{
  						"Action": "sts:AssumeRole",
  						"Effect": "Allow",
  						"Principal": {
  							"Service": "lambda.amazonaws.com"
  						}
  					}
  				],
  				"Version": "2012-10-17"
  			},
  			"Path": "/ecs/lambda/lifecycle/",
  			"Policies": [
  				{
  					"PolicyDocument": {
  						"Statement": {
  							"Action": [
  								"states:*"
  							],
  							"Effect": "Allow",
  							"Resource": "*"
  						},
  						"Version": "2012-10-17"
  					},
  					"PolicyName": "StateMachineStart"
  				},
  				{
  					"PolicyDocument": {
  						"Statement": {
  							"Action": [
  								"ec2:*"
  							],
  							"Effect": "Allow",
  							"Resource": "*"
  						},
  						"Version": "2012-10-17"
  					},
  					"PolicyName": "DescribeEC2"
  				},
  				{
  					"PolicyDocument": {
  						"Statement": [
  							{
  								"Action": [
  									"logs:CreateLogGroup",
  									"logs:CreateLogStream",
  									"logs:PutLogEvents"
  								],
  								"Effect": "Allow",
  								"Resource": "arn:aws:logs:*:*:*"
  							}
  						],
  						"Version": "2012-10-17"
  					},
  					"PolicyName": "Logs"
  				},
  				{
  					"PolicyDocument": {
  						"Statement": [
  							{
  								"Action": [
  									"ecs:ListContainerInstances",
  									"ecs:DescribeContainerInstances",
  									"ecs:DeregisterContainerInstance",
  									"ecs:ListTasks",
  									"ecs:DescribeTasks",
  									"ecs:ListServices",
  									"ecs:DescribeServices",
  									"ecs:UpdateService",
  									"ecs:UpdateContainerInstancesState",
  									"cloudformation:DescribeStacks",
  									"elasticloadbalancing:DescribeLoadBalancers",
  									"elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
  									"elasticloadbalancing:DescribeTargetHealth",
  									"autoscaling:CompleteLifecycleAction",
  									"autoscaling:RecordLifecycleActionHeartbeat"
  								],
  								"Effect": "Allow",
  								"Resource": "*"
  							}
  						],
  						"Version": "2012-10-17"
  					},
  					"PolicyName": "LifecycleECSPermissions"
  				}
  			]
  		}
  	},
  	"LifecycleLambdaRole": {
      "Type": "AWS::IAM::Role",
  		"Properties": {
  			"AssumeRolePolicyDocument": {
  				"Statement": [
  					{
  						"Action": "sts:AssumeRole",
  						"Effect": "Allow",
  						"Principal": {
  							"Service": "lambda.amazonaws.com"
  						}
  					},
  					{
  						"Action": "sts:AssumeRole",
  						"Effect": "Allow",
  						"Principal": {
  							"AWS": {"Fn::Sub": "${AWS::AccountId}"}
  						}
  					}
  				],
  				"Version": "2012-10-17"
  			},
  			"Path": "/ecs/lambda/lifecycle/",
  			"Policies": [
  				{
  					"PolicyDocument": {
  						"Statement": [
  							{
  								"Action": [
  									"logs:CreateLogGroup",
  									"logs:CreateLogStream",
  									"logs:PutLogEvents"
  								],
  								"Effect": "Allow",
  								"Resource": "arn:aws:logs:*:*:*"
  							}
  						],
  						"Version": "2012-10-17"
  					},
  					"PolicyName": "Logs"
  				},
  				{
  					"PolicyDocument": {
  						"Statement": [
  							{
  								"Action": [
  									"ecs:ListContainerInstances",
  									"ecs:DescribeContainerInstances",
  									"ecs:DeregisterContainerInstance",
  									"ecs:ListTasks",
  									"ecs:DescribeTasks",
  									"ecs:ListServices",
  									"ecs:DescribeServices",
  									"ecs:UpdateService",
  									"ecs:UpdateContainerInstancesState",
  									"cloudformation:DescribeStacks",
  									"elasticloadbalancing:DescribeLoadBalancers",
  									"elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
  									"elasticloadbalancing:DescribeTargetHealth",
  									"autoscaling:CompleteLifecycleAction",
  									"autoscaling:RecordLifecycleActionHeartbeat"
  								],
  								"Effect": "Allow",
  								"Resource": "*"
  							}
  						],
  						"Version": "2012-10-17"
  					},
  					"PolicyName": "LifecycleECSPermissions"
  				}
  			]
  		}
  	},
  	"StateMachineRole": {
      "Type": "AWS::IAM::Role",
  		"Properties": {
  			"AssumeRolePolicyDocument": {
  				"Statement": [
  					{
  						"Action": "sts:AssumeRole",
  						"Effect": "Allow",
  						"Principal": {
  							"Service": [
  								{"Fn::Sub": "states.${AWS::Region}.amazonaws.com"}
  							]
  						}
  					}
  				],
  				"Version": "2012-10-17"
  			},
  			"Path": "/ecs/lambda/lifecycle/",
  			"Policies": [
  				{
  					"PolicyDocument": {
  						"Statement": {
  							"Action": [
  								"lambda:InvokeFunction"
  							],
  							"Effect": "Allow",
  							"Resource": {"Fn::GetAtt": ["LifeCycleLambda","Arn"]}
  						},
  						"Version": "2012-10-17"
  					},
  					"PolicyName": "LambdaInvoke"
  				}
  			]
  		}
  	},
    "LifecycleStateMachine": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "RoleArn": {"Fn::GetAtt": ["StateMachineRole", "Arn"]},
        "DefinitionString": {
          "Fn::Join": ["\n", [
            "{",
            "  \"Comment\": \"Drains and shuts down ECS instances\",",
            "  \"StartAt\": \"Drain\",",
            "  \"States\": {",
            "    \"Drain\": {",
            "      \"Type\": \"Task\",",
            "      \"Next\": \"Check\",",
            {"Fn::Sub":["      \"Resource\": \"${LambdaArn}\"", {"LambdaArn": {"Fn::GetAtt": ["LifeCycleLambda", "Arn"]}}]},
            "    },",
            "    \"Check\": {",
            "      \"Type\": \"Task\",",
            {"Fn::Sub":["      \"Resource\": \"${LambdaArn}\",", {"LambdaArn": {"Fn::GetAtt": ["LifeCycleLambda", "Arn"]}}]},
            "      \"Next\": \"Loop\"",
            "    },",
            "    \"Loop\": {",
            "      \"Type\": \"Choice\",",
            "      \"Choices\": [",
            "        {",
            "          \"Variable\": \"$.state\",",
            "          \"StringEquals\": \"state_machine:retry\",",
            "          \"Next\": \"Sleep\"",
            "        },",
            "        {",
            "          \"Variable\": \"$.state\",",
            "          \"StringEquals\": \"state_machine:end\",",
            "          \"Next\": \"Final\"",
            "        }",
            "      ],",
            "      \"Default\": \"Final\"",
            "    },",
            "    \"Sleep\": {",
            "      \"Type\": \"Wait\",",
            "      \"Seconds\": 30,",
            "      \"Next\": \"Check\"",
            "    },",
            "    \"Final\": {",
            "      \"Type\": \"Pass\",",
            "      \"Result\": \"Success!\",",
            "      \"End\": true",
            "    }",
            "  }",
            "}"
          ]]
        }
      }
    }
  },
  "Outputs": {
    "LifecycleHookTopic": {
      "Value": {"Ref": "LifeCycleSNS"},
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}:LifecycleSNSTopicArn"
        }
      }
    },
    "LifecycleHookRole": {
      "Value": {
        "Fn::GetAtt": ["LifeCycleHookRole", "Arn"]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}:LifecycleHookRole"
        }
      }
    }
  }
}
